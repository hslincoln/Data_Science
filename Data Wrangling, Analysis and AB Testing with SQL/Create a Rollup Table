--Exercise 1: Create a subtable of orders per day. Make sure you decide whether you are
--counting invoices or line items.

SELECT date(paid_at) AS day,
       COUNT(DISTINCT invoice_id) AS order_count,
       COUNT(DISTINCT line_item_id) AS item_count
FROM dsv1069.orders
GROUP BY day

--Exercise 2: “Check your joins”. We are still trying to count orders per day. In this step join the
--sub table from the previous exercise to the dates rollup table so we can get a row for every
--date. Check that the join works by just running a “select *” query

SELECT *
FROM dsv1069.dates_rollup rp 
LEFT JOIN (SELECT date(paid_at) AS day,
                  COUNT(DISTINCT invoice_id) AS order_count,
                  COUNT(DISTINCT line_item_id) AS item_count
           FROM dsv1069.orders
           GROUP BY day) AS subtable
ON rp.date=subtable.day

--Exercise 3: “Clean up your Columns” In this step be sure to specify the columns you actually
--want to return, and if necessary do any aggregation needed to get a count of the orders made
--per day.

SELECT rp.date,
       COALESCE(SUM(order_count),0) AS total_orders,
       COALESCE(SUM(item_count),0) AS total_items
FROM dsv1069.dates_rollup rp 
LEFT JOIN (SELECT date(paid_at) AS day,
                  COUNT(DISTINCT invoice_id) AS order_count,
                  COUNT(DISTINCT line_item_id) AS item_count
           FROM dsv1069.orders
           GROUP BY day) AS subtable
ON rp.date=subtable.day 
GROUP BY rp.date

--Exercise 4: Weekly Rollup. Figure out which parts of the JOIN condition need to be edited
--create 7 day rolling orders table.

SELECT *
FROM dsv1069.dates_rollup rp 
LEFT JOIN (SELECT date(paid_at) AS day,
                  COUNT(DISTINCT invoice_id) AS order_count,
                  COUNT(DISTINCT line_item_id) AS item_count
           FROM dsv1069.orders
           GROUP BY day) AS subtable
ON rp.date >= subtable.day 
AND rp.d7_ago < subtable.day

--Exercise 5: Column Cleanup. Finish creating the weekly rolling orders table, by performing
--any aggregation steps and naming your columns appropriately.

SELECT rp.date,
       COALESCE(SUM(order_count),0) AS total_orders,
       COALESCE(SUM(item_count),0) AS total_items
FROM dsv1069.dates_rollup rp 
LEFT JOIN (SELECT date(paid_at) AS day,
                  COUNT(DISTINCT invoice_id) AS order_count,
                  COUNT(DISTINCT line_item_id) AS item_count
           FROM dsv1069.orders
           GROUP BY day) AS subtable
ON rp.date >= subtable.day 
AND rp.d7_ago < subtable.day
GROUP BY rp.date
